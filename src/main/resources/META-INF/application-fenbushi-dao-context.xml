<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd"
       default-lazy-init="true">

    <description>FACADE DAO公共配置文件</description>

    <!-- 事务配置 -->
    <bean id="atomikosTransactionManager" class="com.atomikos.icatch.jta.UserTransactionManager" init-method="init" destroy-method="close">
        <property name="forceShutdown" value="true" />
    </bean>

    <bean id="atomikosUserTransaction" class="com.atomikos.icatch.jta.UserTransactionImp">
        <property name="transactionTimeout" value="300" />
    </bean>

    <bean id="jtaTransactionManager" class="org.springframework.transaction.jta.JtaTransactionManager">
        <property name="transactionManager" ref="atomikosTransactionManager" />
        <property name="userTransaction" ref="atomikosUserTransaction" />
    </bean>

    <tx:annotation-driven transaction-manager="jtaTransactionManager" proxy-target-class="true"/>

    <!--<aop:aspectj-autoproxy proxy-target-class="true" expose-proxy="true"/>-->

    <!--<tx:advice id="txAdvice" transaction-manager="jtaTransactionManager">-->
        <!--<tx:attributes>-->
            <!--<tx:method name="insert*" propagation="REQUIRED"/>-->
            <!--<tx:method name="save*" propagation="REQUIRED"/>-->
            <!--<tx:method name="add*" propagation="REQUIRED"/>-->
            <!--<tx:method name="create*" propagation="REQUIRED"/>-->
            <!--<tx:method name="update*" propagation="REQUIRED"/>-->
            <!--<tx:method name="edit*" propagation="REQUIRED"/>-->
            <!--<tx:method name="delete*" propagation="REQUIRED"/>-->
            <!--<tx:method name="remove*" propagation="REQUIRED"/>-->
            <!--<tx:method name="get*" read-only="true"/>-->
            <!--<tx:method name="find*" read-only="true"/>-->
            <!--<tx:method name="query*" read-only="true"/>-->
            <!--<tx:method name="*" propagation="SUPPORTS" read-only="true"/>-->
        <!--</tx:attributes>-->
    <!--</tx:advice>-->
    <!--<aop:config>-->
        <!--<aop:pointcut id="leePointcut" expression="execution(* com.my.test.transaction.fenbushi..*(..)) "/>-->
        <!--<aop:advisor advice-ref="txAdvice" pointcut-ref="leePointcut"/>-->
    <!--</aop:config>-->

    <!--sessionFactory1-->
    <bean id="sqlSessionFactory_one" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSourceOne" />
        <property name="mapperLocations" value="classpath:META-INF/mapper/one/*.xml"/>
    </bean>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.my.test.transaction.fenbushi.dao1"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory_one"/>
    </bean>

    <!--sessionFactory2-->
    <bean id="sqlSessionFactory_two" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSourceTwo" />
        <property name="mapperLocations" value="classpath:META-INF/mapper/two/*.xml"/>
    </bean>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.my.test.transaction.fenbushi.dao2"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory_two"/>
    </bean>

    <!-- 数据源1 -->
    <bean id="dataSourceOne" class="com.atomikos.jdbc.AtomikosDataSourceBean" destroy-method="close">
        <property name="uniqueResourceName" value="one"/>
        <property name="xaDataSourceClassName" value="com.mysql.jdbc.jdbc2.optional.MysqlXADataSource"/>
        <property name="xaProperties">
            <props>
                <prop key="url">jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=utf-8&amp;allowMultiQueries=true</prop>
                <prop key="user">root</prop>
                <prop key="password">WZITECH_2011</prop>
            </props>
        </property>
        <property name="minPoolSize" value="5"/>
        <property name="maxPoolSize" value="20"/>
        <property name="maxIdleTime" value="60"/>
        <property name="reapTimeout" value="20000"/>
    </bean>

    <!-- 数据源2 -->
    <bean id="dataSourceTwo" class="com.atomikos.jdbc.AtomikosDataSourceBean" destroy-method="close">
        <property name="uniqueResourceName" value="two"/>
        <property name="xaDataSourceClassName" value="com.mysql.jdbc.jdbc2.optional.MysqlXADataSource"/>
        <property name="xaProperties">
            <props>
                <prop key="url">jdbc:mysql://192.168.200.222/caifu_wealth?useUnicode=true&amp;characterEncoding=UTF-8&amp;allowMultiQueries=true</prop>
                <prop key="user">root</prop>
                <prop key="password">YJCaiFu88!</prop>
            </props>
        </property>
        <property name="minPoolSize" value="5"/>
        <property name="maxPoolSize" value="20"/>
        <property name="maxIdleTime" value="60"/>
        <property name="reapTimeout" value="20000"/>
    </bean>

    <!-- - - - - - - - - - - - - - - - - - - - - redis 配置 - - - - - - - - - - - - - - - - - - - - - - - - -->
    <bean id="jedisFactory"
          class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
          p:host-name="${redis.user.host}" p:port="${redis.user.port}" p:use-pool="true"/>

    <!-- User Redis Template配置 -->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate"
          p:connection-factory-ref="jedisFactory"/>

</beans>